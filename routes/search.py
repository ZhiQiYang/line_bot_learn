import re
import logging
import requests
from flask import Blueprint
from linebot.models import TextSendMessage

# Ë®≠ÂÆöÊó•Ë™å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ÂâµÂª∫ËóçÂúñ
search_bp = Blueprint('search', __name__)

# ÂÆöÁæ©ÊêúÁ¥¢Ê∫ê
SEARCH_SOURCES = {
    "wikipedia": {
        "name": "Á∂≠Âü∫ÁôæÁßë",
        "icon": "üìö",
        "api_url": "https://zh.wikipedia.org/w/api.php",
        "params": {
            "action": "query",
            "format": "json",
            "prop": "extracts",
            "exintro": True,
            "explaintext": True,
            "redirects": 1
        }
    },
    "dictionary": {
        "name": "Â≠óÂÖ∏",
        "icon": "üìñ",
        "api_url": "https://www.moedict.tw/uni/",
        "extract_func": lambda data: extract_moedict_definition(data)
    }
}

def extract_moedict_definition(data):
    """ÂæûËêåÂÖ∏APIËøîÂõûÁöÑÊï∏Êìö‰∏≠ÊèêÂèñÂÆöÁæ©"""
    if not data or not isinstance(data, dict):
        return None
    
    definitions = []
    
    # Ê™¢Êü•ÊòØÂê¶ÊúâheteronymsÂ≠óÊÆµ
    if "heteronyms" in data and isinstance(data["heteronyms"], list):
        for h in data["heteronyms"]:
            if "definitions" in h and isinstance(h["definitions"], list):
                for d in h["definitions"]:
                    definition = d.get("def", "")
                    if definition:
                        # Ê∑ªÂä†‰æãÂè•Â¶ÇÊûúÊúâ
                        if "example" in d and isinstance(d["example"], list):
                            examples = d["example"]
                            if examples:
                                definition += "\n‰æãÔºö" + "Ôºõ".join(examples)
                        
                        definitions.append(definition)
    
    if definitions:
        return "\n\n".join(definitions)
    return None

def search_wikipedia(query, lang="zh"):
    """‰ΩøÁî®Wikipedia APIÊêúÁ¥¢ÈóúÈçµË©û"""
    source = SEARCH_SOURCES["wikipedia"]
    api_url = source["api_url"]
    params = source["params"].copy()
    
    # Ê∑ªÂä†Êü•Ë©¢Ë©û
    params["titles"] = query
    
    try:
        response = requests.get(api_url, params=params)
        data = response.json()
        
        # ÊèêÂèñÈ†ÅÈù¢ÂÖßÂÆπ
        pages = data["query"]["pages"]
        for page_id in pages:
            page = pages[page_id]
            
            # Ê™¢Êü•ÊòØÂê¶ÊâæÂà∞ÂÖßÂÆπ
            if "extract" in page and page["extract"]:
                # ÊëòË¶ÅÂèØËÉΩÂæàÈï∑ÔºåÂÉÖËøîÂõûÂâç200ÂÄãÂ≠óÁ¨¶Ôºå‰∏¶Á¢∫‰øùÂÆåÊï¥Âè•Â≠ê
                extract = page["extract"]
                if len(extract) > 200:
                    sentences = re.split(r'[„ÄÇÔºÅÔºü.!?]', extract)
                    short_extract = ""
                    for sentence in sentences:
                        if len(short_extract + sentence) < 200:
                            short_extract += sentence + "„ÄÇ"
                        else:
                            break
                    extract = short_extract
                
                return {
                    "title": page.get("title", query),
                    "extract": extract,
                    "url": f"https://zh.wikipedia.org/wiki/{page.get('title', query).replace(' ', '_')}"
                }
            elif "missing" in page:
                return None
        
        return None
    except Exception as e:
        logger.error(f"Á∂≠Âü∫ÁôæÁßëÊêúÁ¥¢ÈåØË™§: {e}")
        return None

def search_moedict(query):
    """‰ΩøÁî®ËêåÂÖ∏APIÊêúÂ∞ã‰∏≠ÊñáË©ûÂΩôÂÆöÁæ©"""
    source = SEARCH_SOURCES["dictionary"]
    api_url = source["api_url"] + query
    
    try:
        response = requests.get(api_url)
        
        # Ê™¢Êü•ÊòØÂê¶ÊàêÂäü
        if response.status_code == 200:
            data = response.json()
            
            # ‰ΩøÁî®ÊèêÂèñÂáΩÊï∏Áç≤ÂèñÂÆöÁæ©
            definition = source["extract_func"](data)
            
            if definition:
                return {
                    "title": query,
                    "extract": definition,
                    "url": f"https://www.moedict.tw/#{query}"
                }
        
        return None
    except Exception as e:
        logger.error(f"ËêåÂÖ∏ÊêúÁ¥¢ÈåØË™§: {e}")
        return None

def handle_search_command(text):
    """ËôïÁêÜÊêúÁ¥¢ÂëΩ‰ª§"""
    # Ê™¢Êü•ÊòØÂê¶ÊòØÊêúÁ¥¢ÂëΩ‰ª§
    if not text.startswith("#ÊêúÂ∞ã") and not text.startswith("#ÊêúÁ¥¢"):
        return None
    
    # ÊèêÂèñÊêúÁ¥¢ÈóúÈçµË©û
    match = re.match(r"#(?:ÊêúÂ∞ã|ÊêúÁ¥¢)\s+(.+)", text)
    if not match:
        return "üîç Ë´ãÊèê‰æõË¶ÅÊêúÂ∞ãÁöÑÈóúÈçµË©ûÔºå‰æãÂ¶Ç: #ÊêúÂ∞ã ÈáèÂ≠êÂäõÂ≠∏"
    
    keyword = match.group(1).strip()
    if not keyword:
        return "üîç Ë´ãÊèê‰æõË¶ÅÊêúÂ∞ãÁöÑÈóúÈçµË©ûÔºå‰æãÂ¶Ç: #ÊêúÂ∞ã ÈáèÂ≠êÂäõÂ≠∏"
    
    # ÂÖàÂòóË©¶Áî®ËêåÂÖ∏ÊêúÁ¥¢ÔºàÂ¶ÇÊûúÊòØ‰∏≠ÊñáË©ûÂΩôÔºâ
    if any('\u4e00' <= char <= '\u9fff' for char in keyword):
        result = search_moedict(keyword)
        if result:
            return format_search_result(result, "dictionary")
    
    # ÁÑ∂ÂæåÂòóË©¶Áî®Á∂≠Âü∫ÁôæÁßëÊêúÁ¥¢
    result = search_wikipedia(keyword)
    if result:
        return format_search_result(result, "wikipedia")
    
    # Â¶ÇÊûúÈÉΩÊ≤íÊâæÂà∞ÁµêÊûú
    return f"üîç Êä±Ê≠âÔºåÊâæ‰∏çÂà∞ÈóúÊñº„Äå{keyword}„ÄçÁöÑË≥áË®ä„ÄÇ"

def format_search_result(result, source_key):
    """Ê†ºÂºèÂåñÊêúÁ¥¢ÁµêÊûúÁÇ∫ÊòìËÆÄÁöÑÊ∂àÊÅØ"""
    source = SEARCH_SOURCES[source_key]
    
    formatted_result = (
        f"{source['icon']} {source['name']}Ôºö{result['title']}\n\n"
        f"{result['extract']}\n\n"
        f"üìé Ë©≥Á¥∞Ë≥áË®ä: {result['url']}"
    )
    
    return formatted_result 